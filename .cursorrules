# Portfolio Project Intelligence

## Project Patterns
- Portfolio website built with Next.js and TailwindCSS
- Modern, minimalist design with responsive layout
- Interactive elements enhanced with Framer Motion animations
- Component organization follows atomic design principles
- shadcn/ui components for consistent UI elements

## Code Conventions
- Use TypeScript for all components and functions
- Follow file-based routing pattern with Next.js
- Organize components by feature and reusability
- Use Tailwind utility classes for styling
- Keep animations performant and purposeful

## Workflow Preferences
- Implement one component or section at a time
- Test responsiveness on multiple device sizes
- Optimize images and assets for performance
- Use semantic HTML for accessibility
- Follow mobile-first development approach

## Implementation Guidelines
- Use Framer Motion for complex animations
- Implement smooth scrolling with Lenis
- Structure project data in a maintainable format
- Create reusable UI components for consistent design
- Ensure accessibility compliance throughout development

## Known Challenges
- Balancing animation performance with visual appeal
- Maintaining consistent responsive behavior
- Optimizing image loading for project showcase
- Ensuring smooth scrolling across devices

## Component Locations
- Layout components in src/components/layout/
- UI components in src/components/ui/
- Section components in src/components/sections/
- Animation utilities in src/lib/animations/
- Data models in src/types/

## Portfolio Chatbot Implementation

### Key Components
- `src/context/ChatContext.tsx`: Provides chat state management with React Context API
- `src/components/ui/ChatButton.tsx`: Floating button component for opening chat
- `src/components/ui/ChatWindow.tsx`: Main chat window with header, message list, and input
- `src/components/ui/MessageList.tsx`: Displays chat messages with styling
- `src/components/ui/MessageInput.tsx`: Input component for typing messages
- `src/lib/chatService.ts`: Handles API integration with OpenRouter
- `src/lib/portfolioContext.ts`: Contains portfolio information for the chatbot
- `src/types/chat.ts`: TypeScript types for chat functionality

### Critical Implementation Details
- OpenRouter API key stored in `.env.local` file (not committed to repository)
- Portfolio context injected as system prompt for contextual responses
- Chat history persisted in localStorage for session continuity
- UI styled with Tailwind CSS to match portfolio design
- Animations implemented with Framer Motion
- Message timestamps formatted with date-fns

### Security Considerations
- API key must be kept in environment variables
- `.env.local` must not be committed to the repository
- Consider rate limiting to prevent abuse

This file will be updated as more project intelligence is gathered during implementation. 